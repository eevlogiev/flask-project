---
name: CI Pipeline
    
on:
    push:
      branches:
        - '*'
 #      - '!main'
    
jobs:
  
    build:
      
      name: Build Image
      runs-on: ubuntu-latest
     
      steps:

        # Get Short Git commit SHA
        - name: Set short git commit SHA
          id: commit
          uses: prompt/actions-commit-hash@v2
          
            # Check out the code
        - name: Check out code
          uses: actions/checkout@v4

        # Configure AWS credentials for authentication
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

          # Login to Amazon ECR (Elastic Container Registry)
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

          # Build, tag, and push Docker image to Amazon ECR
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ vars.APP_NAME }}
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
            echo "image_tag=$IMAGE_TAG" 
            echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        - name: Update kube config
          run: aws eks update-kubeconfig --name flask-cluster --region ${{ vars.AWS_REGION }}
        
#        - name: Deploy to EKS
#          run: |
#            kubectl apply -f deployment.yaml
#            kubectl apply -f service.yaml
#           helm upgrade flask-app ./helm/ --atomic --wait --install --namespace prod --set deployment.tag=$GIT_COMMIT --create-namespace --set deployment.env=prod 