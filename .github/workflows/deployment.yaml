---
name: CI/CD Pipeline

on:
    push:
      branches:
        - '*'
      paths:
        - 'app/**'
        - 'helm/**'
        - '!helm/values.yaml'
        - Dockerfile
permissions:
      id-token: write # This is required for requesting the JWT through OIDC

jobs:
    # Code style checks
    EditorConfig:
      name: EditorCongfig Linter
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: editorconfig-checker/action-editorconfig-checker@v2
        - run: editorconfig-checker

    Pylint:
    # Python linter
      name: Pylint Linter
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.10", "3.11"]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
              python -m pip install --upgrade pip
              pip install pylint -r requirements.txt
        - name: Analysing the code with pylint
          run: |
                pylint --disable=all --enable=unused-import $(git ls-files 'app/*.py')

    Black-formatter:
      name: Python Black formatter
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Run black python formatter
          uses: psf/black@stable
          with:
              options: "--check --verbose"
              src: "./app"

    Unit-test:
      name: Unit Testing
      runs-on: ubuntu-latest
      needs: [EditorConfig, Pylint, Black-formatter]
      strategy:
        matrix:
          python-version: ["3.10", "3.11"]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Running unit test
          run: |
            cd app && python test_web.py

    SonarCloud:
      name: SonarCloud security scan
      runs-on: ubuntu-latest
      needs: [Unit-test]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            # Disabling shallow clone is recommended for improving relevancy of reporting
            fetch-depth: 0
        - name: SonarCloud Scan
          uses: sonarsource/sonarcloud-github-action@master
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          with:
            args: >
              -Dsonar.organization=eevlogiev
              -Dsonar.projectKey=eevlogiev_devops-telerik

    Snyk:
      name: Snyk security scan
      runs-on: ubuntu-latest
      needs: [Unit-test]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/python-3.8@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: --severity-threshold=high

    Build-and-Deploy:
      name: Build Image
      runs-on: ubuntu-latest
      needs: [SonarCloud, Snyk]
      steps:

        # Get Short Git commit SHA
        - name: Set short git commit SHA
          id: commit
          uses: prompt/actions-commit-hash@v3

        # Check out the code
        - name: Check out code
          uses: actions/checkout@v4

        # Set workflow variables
        - name: Set variables
          run: |
            ROLE_ARN_RUNNER=$(cat terraform/pre-deploy/role-arn.txt)
            echo "ROLE_ARN=$ROLE_ARN_RUNNER" >> $GITHUB_ENV

        # Configure AWS credentials for authentication
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ env.ROLE_ARN }}
            role-session-name: helmdeploy
            aws-region: ${{ vars.AWS_REGION }}

        # Login to Amazon ECR (Elastic Container Registry)
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        # Build, tag, and push Docker image to Amazon ECR
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: flask
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
            echo "image_tag=$IMAGE_TAG"
            echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        # Update kube config
        - name: Update kube config
          run: aws eks update-kubeconfig --name flask-cluster --region ${{ vars.AWS_REGION }}

          # Deploy application to EKS (Development)
        - name: Deploy application to EKS (Development)
          env:
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          if: github.ref == 'refs/heads/dev'
          run: |
            helm upgrade flask-app ./helm/ --atomic --wait --install --namespace dev --set deployment.tag=$IMAGE_TAG --create-namespace --set deployment.env=dev

        # Deploy application to EKS (Staging)
        - name: Deploy application to EKS (Staging)
          env:
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          if: github.ref == 'refs/heads/stage'
          run: |
            helm upgrade flask-app ./helm/ --atomic --wait --install --namespace stage --set deployment.tag=$IMAGE_TAG --create-namespace --set deployment.env=stage

        # Deploy application to EKS (Production)
        - name: Deploy application to EKS (Production)
          env:
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          if: github.ref == 'refs/heads/main'
          run: |
            helm upgrade flask-app ./helm/ --atomic --wait --install --namespace prod --set deployment.tag=$IMAGE_TAG --create-namespace --set deployment.env=prod
